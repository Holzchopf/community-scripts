"""
ISC License

Copyright 2023 Olivier Stuker a.k.a. BinaryBorn

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import flpianoroll as flp

"""
Rotate
by: BinaryBorn

2023-09-14
  - initial version

2023-10-20
  - switched to getTimelineSelection()
"""

# Utility function to get time range of selection / notes
def getTimeRange(notes):
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)


def createDialog():
  form = flp.ScriptDialog("Rotate","Rotate score along the time axis."
  + "\r\n\r\n2023-09-14, BinaryBorn")
  form.AddInputKnobInt('Rotation', 0, -flp.score.noteCount, flp.score.noteCount)
  
  return form


def apply(form):
  rotation = form.GetInputValue('Rotation')

  noteCount = flp.score.noteCount

  # get current notes
  notes = [flp.score.getNote(i) for i in range(noteCount)]
  # order by start time
  notes.sort(key=lambda n: (n.time, n.number))

  times = getTimeRange(notes)
  # times = flp.score.getTimelineSelection()
  t0 = times[0]
  t1 = times[1]

  # gather virtual note lengths (= delta time to next note)
  vlengths = [0] * noteCount
  for i in range(noteCount - 1):
    vlengths[i] = notes[i + 1].time - notes[i].time
  # use end of time range as that's not necessarily last note's end time
  vlengths[noteCount - 1] = t1 - notes[noteCount - 1].time

  # move note start times to other notes
  for i in range(noteCount):
    itarget = (i - rotation) % noteCount
    if (itarget < 0): itarget += noteCount
    notes[itarget].time = t0
    t0 += vlengths[itarget]
