"""
ISC License

Copyright 2024 Olivier Stuker a.k.a. BinaryBorn

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import flpianoroll as flp

"""
Polyrhythmic repeater
by: BinaryBorn

2024-02-02
  - initial version
"""

def createDialog():
  form = flp.ScriptDialog("Polyrhythmic repeater","Repeat your notes at different rates."
  + "\r\nSequence length is in bars."
  + "\r\n\r\n2024-02-02, BinaryBorn")
  form.AddInputKnobInt('Sequence length', 4, 1, 256)
  form.AddInputCombo('Iterate by', ['note (top down)', 'note (bottom up)', 'color'], 0)
  form.AddInputKnobInt('Repetitions start', 4, 2, 1024)
  form.AddInputCheckbox('Add terminal', True)
  
  return form

def apply(form):
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  if not notes: return

  ppq = flp.score.PPQ
  ttot = form.GetInputValue('Sequence length') * 4 * ppq
  iterMode = form.GetInputValue('Iterate by')
  repCnt = form.GetInputValue('Repetitions start')
  optTerminal = 1 if form.GetInputValue('Add terminal') else 0

  # order notes according to iteration mode
  if iterMode == 0:
    # top down
    notes.sort(key=lambda n: -n.number)
  elif iterMode == 1:
    # bottom up
    notes.sort(key=lambda n: n.number)
  elif iterMode == 2:
    # color
    notes.sort(key=lambda n: n.color)

  for n in notes:
    for i in range(1, repCnt + optTerminal):
      toff = round(ttot * i / repCnt)
      note = n.clone()
      note.time += toff
      flp.score.addNote(note)
    # increase repetitions count for next iteration
    repCnt += 1