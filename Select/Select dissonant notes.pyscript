"""
ISC License

Copyright 2023 Olivier Stuker a.k.a. BinaryBorn

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import flpianoroll as flp
import math
import _random

random = _random.Random()

"""
Select dissonant notes
idea: D3Mens
code: BinaryBorn

2024-02-05
  - initial version
"""

def getScales():
  """Returns a list of scales in the piano roll.
  
  A scale is a dictionary of
  - time (int): time where the scale starts, in ticks
  - notes (list[bool]): the 12 semitones in an octave an whether they're in scale (`True`) or not (`False`)
  """
  scales = []
  for m in range(flp.score.markerCount):
    marker = flp.score.getMarker(m)
    # scale marker
    if marker.mode == 12:
      # scale_helper is a string in form "0,1,0,1,0,0,1,0,1,0,1,0" telling which notes (starting from C) are in the scale (0) and which aren't (1)
      # transform into array of in scale (True), not in scale (False)
      splat = marker.scale_helper.split(',')
      notes = [s == '0' for s in splat]
      # "default" scale will be all False - don't append that, invert instead
      if not max(notes) == 0:
        # append that with its starting time
        scales.append({
          'time': marker.time,
          'notes': notes
        })
      else:
        scales.append({
          'time': marker.time,
          'notes': [True, True, True, True, True, True, True, True, True, True, True, True]
        })
  return scales

def getScaleAt(time):
  """Returns the scale that's active at given time.
  """
  s = {
    'time': 0,
    'notes': [True, True, True, True, True, True, True, True, True, True, True, True]
  }

  # find latest scale before time
  for scale in scales:
    if time >= scale['time']: s = scale

  return s

def apply():
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  if not notes: return

  for n in notes:
    # get scale at note start time
    scale = getScaleAt(n.time)
    # select all notes not in scale, deselect all others
    if (scale['notes'][n.number % 12] == False):
      n.selected = True
    else:
      n.selected = False

# gathering markers is only required once - they don't update as long as script is active

scales = getScales()